{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;\red162\green70\blue22;
}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;\cssrgb\c70196\c35294\c10588;
}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Audience question\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb1 \
\pard\pardeftab720\sa400\partightenfactor0

\f1\b \cf2 \cb3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Pasted Graphic.png \width1440 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f1\b\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 Jolene: Instead of copying\'a0
\f3 \cf4 \strokec4 nextGrid
\f1 \cf2 \strokec2 \'a0to\'a0
\f3 \cf4 \strokec4 grid
\f1 \cf2 \strokec2 , couldn't we just switch the arrays?
\f0\b0 \cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 \cb3 You're saying we could save some work by using\'a0
\f4 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0as the current state, and\'a0
\f4 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0as the next state for the 2nd generation? And, of course, we'd have to keep switching back and forth so every other generation, we use\'a0
\f4 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0or\'a0
\f4 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0as the current state, and the other array as the next state.\cb1 \
\cb3 Yes, we certainly could do that. It does save some work, but not all of it, because we need to reset the\'a0
\f4 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0back to all zeros anyway. So as long as we're iterating, we chose to copy the state from\'a0
\f4 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0to\'a0
\f4 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 . We also think it makes the code a bit easier to understand conceptually.\cb1 \
\cb3 That said, we like your thinking and once we've finished we encourage you to retrofit your code to avoid unnecessary copying.\cb1 \
}