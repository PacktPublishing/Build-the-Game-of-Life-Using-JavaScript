{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;\red162\green70\blue22;
}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;\cssrgb\c70196\c35294\c10588;
}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Update the View from the Model: Overview\
\pard\pardeftab720\sa400\partightenfactor0

\fs36 \cf2 For this next step, we'll implement two new functions:\'a0
\f1 \cf4 \strokec4 copyAndResetGrid
\f0 \cf2 \strokec2 \'a0and\'a0
\f1 \cf4 \strokec4 updateView
\f0 \cf2 \strokec2 .\cb1 \
\pard\pardeftab720\sa400\partightenfactor0

\f1 \cf4 \cb3 \strokec4 copyAndResetGrid
\f0 \cf2 \strokec2 \'a0will copy the values from\'a0
\f1 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0into\'a0
\f1 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0by iterating through all the cells and copying them. In the same iteration, we'll also reset the values in\'a0
\f1 \cf4 \strokec4 nextGrid
\f0 \cf2 \strokec2 \'a0back to zeros.\cb1 \

\f1 \cf4 \cb3 \strokec4 updateView
\f0 \cf2 \strokec2 \'a0will look at the state in the model---that is, the data in the\'a0
\f1 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0array---and update the view based on that data. That means if a cell in the\'a0
\f1 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0array has a 1, we'll update the class of the corresponding cell in the table to "live". And if a cell in the\'a0
\f1 \cf4 \strokec4 grid
\f0 \cf2 \strokec2 \'a0array has a 0, we'll update the class of the corresponding cell in the table to "dead".\cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 \cb3 Once we get this code added, we'll be able to see one round of life being generated in the browser!\cb1 \
\cb3 Watch the video in the next lesson, and follow along in your own code as we implement these two functions.\cb1 \
}