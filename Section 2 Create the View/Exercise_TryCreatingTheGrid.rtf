{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;\red162\green70\blue22;
}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;\cssrgb\c70196\c35294\c10588;
}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Exercise: Try creating the grid\
\pard\pardeftab720\sa400\partightenfactor0

\fs36 \cf2 You now know the approach we're going to use to create a grid using HTML tables. Make a quick sketch or write some pseudocode for how the table is going to be created. Remember to take into account that we might want to be able to create grids of different sizes, so you might need a couple of variables, say\'a0
\f1 \cf4 \strokec4 rows
\f0 \cf2 \strokec2 \'a0and\'a0
\f1 \cf4 \strokec4 cols
\f0 \cf2 \strokec2 \'a0to represent the number of rows and columns respectively.\cb1 \
\cb3 If you aren't that familiar with dynamically creating DOM elements with JavaScript, don't worry; just think through how this might work and write some quick pseudocode.\cb1 \
\cb3 After you've sketched out your own version of this, we'll implement the code together in the next lesson.\cb1 \
}