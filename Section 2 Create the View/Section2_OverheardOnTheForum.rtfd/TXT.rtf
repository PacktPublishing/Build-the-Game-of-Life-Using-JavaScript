{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;\red162\green70\blue22;
}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;\cssrgb\c70196\c35294\c10588;
}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Overheard on the forum\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb1 \
\
\cb3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Pasted Graphic.jpg \width720 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 1.jpg \width720 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 2.jpg \width720 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 AJ: Okay, I get we're going to make the grid out of a <table> element, and we're going to somehow do it programmatically using JavaScript. But what exactly does that mean, and why aren't we just typing the markup in?\cb1 \
\cb3 Bill: You don't want to type it in by hand, that would require typing hundreds of table elements. Not only would it take forever, that sounds very error prone!\cb1 \
\cb3 Sarah: We are programmers; there's no reason to type all that in. We can do it with JavaScript DOM methods, like\'a0
\f2 \cf4 \strokec4 document.createElement()
\f0 \cf2 \strokec2 \'a0and then create the <table> element and all the <tr> elements for the table rows and the <td> elements for the table cells with code.\cb1 \
\cb3 AJ: Okay, I think I get it, sorta. So if we know how big the grid is, we can just step through the rows and columns and use the DOM methods to create the various elements we need?\cb1 \
\cb3 Sarah: Right. More precisely, you'd use\'a0
\f2 \cf4 \strokec4 createElement()
\f0 \cf2 \strokec2 \'a0to create each element and the\'a0
\f2 \cf4 \strokec4 appendElement()
\f0 \cf2 \strokec2 \'a0method to add them to the DOM.\cb1 \
\cb3 Bill: Don't forget too, we'll need to figure out how to use the CSS classes we've already set up.\cb1 \
\cb3 Sarah: I don't think it'll be too bad. We should really think through everything we need before we jump into the code. That way we'll have no surprises.\cb1 \
\cb3 AJ: That works for me!\cb1 \
}