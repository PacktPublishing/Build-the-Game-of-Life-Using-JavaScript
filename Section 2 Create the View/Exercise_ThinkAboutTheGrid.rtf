{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Exercise: Think about the grid\
\pard\pardeftab720\sa400\partightenfactor0

\fs36 \cf2 You already know we're going to use a table to represent our grid\'97that is, we're going to use HTML's <table>, <tr>, and <td> elements to implement the visual aspect of the grid. Given your general knowledge of browser technologies (HTML, CSS, etc.), can you think of other ways we might have approached creating a grid?\cb1 \
\cb3 What do you think are the advantages and disadvantages of these various approaches?\cb1 \
\cb3 Here's our thinking:\cb1 \
\cb3 We could use a proprietary technology, like Adobe Flash, which could result in a fantastic user experience\'97that is, for those users who can actually run Flash (some mobile platforms, for instance, would be an issue). Also, maintainability might also be an issue given not as many developers are working with Flash these days.\cb1 \
\cb3 Another option would be to use the HTML Canvas element. This would be an excellent option for displaying the grid and would most likely result in faster performance for the grid updates. In fact, the only reason we didn't use the Canvas is because we wanted this project to focus on integration of the HTML, CSS and JavaScript, without the distraction of other technologies.\cb1 \
\cb3 Did you come up with any others?\cb1 \
}